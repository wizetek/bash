#!/bin/bash

# vmboot - QEMU VM launch wrapper
# configuration in ~/.config/vmbootrc
# Tom Wizetek <tom@wizetek.com>

# --gen-ver
VER="22.148"
CFG="${HOME}/.config/$(basename ${0})rc"

# Try to read config file
if [[ -f ${CFG} && -r ${CFG} ]]; then
source ${CFG}

# If QEMU command is missing in config file, warn and use QEMU defaults
if [[ ${CMD} == "" ]]; then
echo "Missing options in ${CFG}. Using QEMU defaults."
CMD="qemu-system-x86_64"
fi

# If config file is not found, generate it
elif [[ ! -e ${CFG} ]]; then
mkdir -p "${HOME}/.config"
cat > ${CFG} << ENDCFGFILE
# ${CFG}
#
# $(basename ${0}) configuration file
#
# CMD points to QEMU binary
# CPU is recommended for best performance
# SMP, RAM, NIC, SND, OPT are optional

CMD="qemu-system-x86_64"
CPU="-accel kvm -cpu host"
# Newer Q35 PCIe instead of i440FX PCI host bridge
#CPU="-machine q35,accel=kvm -cpu host"
SMP="-smp 2"
RAM="-m 4G"
#NIC="-nic mac=52:54:01:23:45:67"
# Random MAC address
NIC="-nic mac=\$( printf 52:54:%02x:%02x:%02x:%02x \$(( \${RANDOM} & 0xff )) \$(( \${RANDOM} & 0xff )) \$(( \${RANDOM} & 0xff)) \$(( \${RANDOM} & 0xff )) )"
#SND="-soundhw hda"
SND="-device AC97"
#OPT="-monitor unix:/tmp/qemu-monitor,server,nowait -action panic=pause"
ENDCFGFILE

echo "Created ${CFG}"
# Re-run the script with all supplied arguments
exec ${0} ${@}

# If unable to use config file, warn and set some basic QEMU options
else
echo "Failed to access ${CFG}. Using default options."
CMD="qemu-system-x86_64"
CPU="-accel kvm -cpu host"
SMP="-smp 2"
RAM="-m 4G"
fi

# If first argument is a switch instead of file name, handle it
case ${1} in

--)
shift
exec ${CMD} ${@}
;;

-raw)
EXT=".raw"
shift
;;

-cd)
EXT=".iso"
shift
;;

-v|--version)
echo "$(basename ${0}) v${VER}"
exit 0
;;

--gen-ver)
echo "VER=\"$(date +%y.%j)\""
exit 0
;;

-h|"")
cat << ENDSHORTHELP

Basic usage:

  $(basename ${0}) diskimage.img

QEMU options used automatically based on file extension:
  -cdrom	for .iso
  -hda		for .qcow2 .vdi .vmdk .vhdx ...
  -drive file=	for .raw .img

For advanced usage type: $(basename ${0}) --help

ENDSHORTHELP
exit 0
;;

--help)
cat << ENDLONGHELP

  $(basename ${0}) [-raw|-cd|--] diskimage.img [-opt] [-opt] [...]

Optional first switch:
  -raw		Force raw format for disk image
  -cd		Force cdrom medium for disk image
  --		Pass everything that follows directly to QEMU
  -v		Show version
  -h		Basic help
  --help	Advanced help

Some common QEMU [-opt]ions:
  -boot d		a b (FDD1 FDD2), c d (HDD1 HDD2), d (CDROM), n (NIC)
  -boot c,once=d
  -nic mac=52:54:01:23:45:67
  -nic bridge		(Must be configured on host)
  -nic none		No network
  -nic hostfwd=tcp::5022-:22
  -nic hostfwd=tcp::6001-:6000
  -nic hostfwd=tcp::5555-:3389
  -nic model=virtio-net-pci
  -nic model=?		List supported NIC models
  -soundhw ?		List supported sound cards
  -device ?		List all available devices by type
  -device usb-tablet	(Prevents mouse grab)
  -device VGA,edid=on,xres=1366,yres=768
  -loadvm <tag>		Load saved state from snapshot
  -snapshot		Don't write changes to disk image (can still 'commit all' in Monitor)
  -S			Start paused
  -no-shutdown		Don't exit on shutdown
  -no-quit		Don't allow closing window
  -full-screen
  -name			Title for QEMU window and VNC window
  -vnc :1		Video output to VNC server display :1 (password set in Monitor)
  -vnc :0,to=9,lossy=on	Try :0, :1, :2, :3, ... until :9; use lossy JPEG compression
  -display none		No video output to user (guest still has video)
  -nographic		No GUI / command line only (output and Monitor in host console)
  -monitor stdio	Monitor in host console
  -monitor unix:/tmp/qemu-monitor,server,nowait		('socat /tmp/qemu-monitor STDIO')
  -monitor telnet::5023,server,nowait
  -daemonize		Detach process from stdio

For more QEMU options type: $(basename ${0}) -- --help

ENDLONGHELP
exit 0
;;

esac

# If not forcing disk type via first switch, get file extension .123 characters
if [[ ${EXT} == "" ]]; then
EXT="${1:(-4)}"
fi

# Identify .raw .img .iso simply by file extension and then force disk type
case ${EXT} in

.raw|.img)
DSK="-drive format=raw,file="
;;

.iso)
DSK="-cdrom "
;;

*)
DSK="-hda "
;;

esac

# Define window title at this point
NAM="$(basename -a ${1} 2>/dev/null)"

# If QEMU switches are supplied, override the corresponding default options
for ARG in ${@}; do
case $ARG in

-cpu)
CPU=""
;;

-smp)
SMP=""
;;

-m)
RAM=""
;;

-nic|-netdev)
NIC=""
;;

# Caveat: '-device' may not be a sound card
-soundhw|-device)
SND=""
;;

-name)
NAM=""
;;

esac
done

# Define disk image here and then shift arguments
IMG="${1}"
shift
echo ${CMD} ${CPU} ${SMP} ${RAM} ${NIC} ${SND} ${OPT} ${@} ${DSK}\"${IMG}\"

# Execute QEMU based on whether '-name' is specified
if [[ ${NAM} == "" ]]; then
${CMD} ${CPU} ${SMP} ${RAM} ${NIC} ${SND} ${OPT} ${@} ${DSK}"${IMG}"
else
${CMD} ${CPU} ${SMP} ${RAM} ${NIC} ${SND} ${OPT} ${@} -name "${NAM}" ${DSK}"${IMG}"
fi

##
